
#include <vector>
#include <iostream>
#include <time.h>
using namespace std;
void findMax2(vector<int> & array,int low,int high,int &max1_i,int &max2_i) 
{
	if(low+2==high)
	{
		if(array[low]>array[high-1])
		{
			max1_i=low;
			max2_i=high-1;			
		}
		else
		{
			max2_i=low;
			max1_i=high-1;			
		}
		return;
	}
	
	else if(low+3==high)
	{
		if(array[low]>array[low+1])
			if(array[low]>array[low+2])
				if(array[low+1]>array[low+2])
				{
					max1_i=low;
					max2_i=low+1;		
				}
				else
				{
					max1_i=low;
					max2_i=low+2;		
				}
			else 
			{
				max1_i=low+2;
				max2_i=low;			
			}
		else 
			if(array[low]<array[low+2])
				if(array[low+1]>array[low+2])
				{
					max1_i=low+1;
					max2_i=low+2;		
				}
				else
				{
					max1_i=low+2;
					max2_i=low+1;		
				}
			else 
			{
				max1_i=low+1;
				max2_i=low;			
			}
		return;			
	}
	
	int mid((low+high)/2);
	int lmax1_i,lmax2_i,rmax1_i,rmax2_i;
	findMax2(array,low,mid,lmax1_i,lmax2_i);
	findMax2(array,mid,high,rmax1_i,rmax2_i);
	
	if(array[lmax1_i]>array[rmax1_i])
	{
		max1_i=lmax1_i;
		max2_i=(array[lmax2_i]>array[rmax1_i]) ? lmax2_i:rmax1_i;
	}
	else
	{
		max1_i=rmax1_i;
		max2_i=(array[rmax2_i]>array[lmax1_i]) ? rmax2_i:lmax1_i;
	}
	
	
	
}

int main()
{
	int max1_i,max2_i;
	vector<int> array1 {
						-2,-5,-3,-25,-546,-34,-6,-344,-45,-3,-34,-34,-344,-1,-9,
						1,3,453,35,46,656,7,567,76,67,65,4,3,4,6,3,7,5,8,57,5,6,
						345,7,68,987,9,4,34,578,7,43,57,678,45,8,566,8,65,89,45,
						345,67,68,87,879,7,98,9,89,8,98,96,7,5,4,5,3,4,3,45,54,45,
						12,34,45566,5,65,6454,57,67,4557,45,76,756,456,43,432,634,
						34,646,546,57,567,6786,45,58,6,57,56,67,6547,657,56,75,754,
						45,5666,6,456,6,6,64,56,564,65,4654,6,5456,64,545,96,6,64,
						65,65,5,6,565,565465,564,65456,857,85,456,64,565465,4,545,
						-5,-145,5,-56,524,6545,6546,-456156,545,6654,65,5653,5,-5,
						-6546,-5456654,-5415,564,4,654,56465,655,-654,4654,5456,5,
						3,56,5,6,6,6,654,5,4574,65,954158,5,5456,545,54,8524,585,552,
						54,5,5,6,5,56,6,5,65,5,5,5,6,5,56,5,6,56,5,65,65,5,655,565,
						4,5,5,5,6,6,6,8,5,8,5,8,5,8,5,8,589,59,6,966,9,58,5,89,6,96,9,
						588,58,98,585,5,8,85,885,8,8,8,8,8,8,8,55,66,65,6,99,9,99,
						1,3,453,35,46,656,7,567,76,67,65,4,3,4,6,3,7,5,8,57,5,6,
						345,7,68,987,9,4,34,578,7,43,57,678,45,8,566,8,65,89,45,
						345,67,68,87,879,7,98,9,89,8,98,96,7,5,4,5,3,4,3,45,54,45,
						12,34,45566,5,65,6454,57,67,4557,45,76,756,456,43,432,634,
						34,646,546,57,567,6786,45,58,6,57,56,67,6547,657,56,75,754,
						45,5666,6,456,6,6,64,56,564,65,4654,6,5456,64,545,96,6,64,
						65,65,5,6,565,565465,564,65456,857,85,456,64,565465,4,545,
						-5,-145,5,-56,524,6545,6546,-456156,545,6654,65,5653,5,-5,
						-6546,-5456654,-5415,564,4,654,56465,655,-654,4654,5456,5,
						1,3,453,35,46,656,7,567,76,67,65,4,3,4,6,3,7,5,8,57,5,6,
						345,7,68,987,9,4,34,578,7,43,57,678,45,8,566,8,65,89,45,
						345,67,68,87,879,7,98,9,89,8,98,96,7,5,4,5,3,4,3,45,54,45,
						12,34,45566,5,65,6454,57,67,4557,45,76,756,456,43,432,634,
						34,646,546,57,567,6786,45,58,6,57,56,67,6547,657,56,75,754,
						45,5666,6,456,6,6,64,56,564,65,4654,6,5456,64,545,96,6,64,
						65,65,5,6,565,565465,564,65456,857,85,456,64,565465,4,545,
						-5,-145,5,-56,524,6545,6546,-456156,545,6654,65,5653,5,-5,
						-6546,-5456654,-5415,564,4,654,56465,655,-654,4654,5456,5,
						1,3,453,35,46,656,7,567,76,67,65,4,3,4,6,3,7,5,8,57,5,6,
						345,7,68,987,9,4,34,578,7,43,57,678,45,8,566,8,65,89,45,
						345,67,68,87,879,7,98,9,89,8,98,96,7,5,4,5,3,4,3,45,54,45,
						12,34,45566,5,65,6454,57,67,4557,45,76,756,456,43,432,634,
						34,646,546,57,567,6786,45,58,6,57,56,67,6547,657,56,75,754,
						45,5666,6,456,6,6,64,56,564,65,4654,6,5456,64,545,96,6,64,
						65,65,5,6,565,565465,564,65456,857,85,456,64,565465,4,545,
						-5,-145,5,-56,524,6545,6546,-456156,545,6654,65,5653,5,-5,
						-6546,-5456654,-5415,564,4,654,56465,655,-654,4654,5456,5,
						1,3,453,35,46,656,7,567,76,67,65,4,3,4,6,3,7,5,8,57,5,6,
						345,7,68,987,9,4,34,578,7,43,57,678,45,8,566,8,65,89,45,
						345,67,68,87,879,7,98,9,89,8,98,96,7,5,4,5,3,4,3,45,54,45,
						12,34,45566,5,65,6454,57,67,4557,45,76,756,456,43,432,634,
						34,646,546,57,567,6786,45,58,6,57,56,67,6547,657,56,75,754,
						45,5666,6,456,6,6,64,56,564,65,4654,6,5456,64,545,96,6,64,
						65,65,5,6,565,565465,564,65456,857,85,456,64,565465,4,545,
						-5,-145,5,-56,524,6545,6546,-456156,545,6654,65,5653,5,-5,
						-6546,-5456654,-5415,564,4,654,56465,655,-654,4654,5456,5,
						1,3,453,35,46,656,7,567,76,67,65,4,3,4,6,3,7,5,8,57,5,6,
						345,7,68,987,9,4,34,578,7,43,57,678,45,8,566,8,65,89,45,
						345,67,68,87,879,7,98,9,89,8,98,96,7,5,4,5,3,4,3,45,54,45,
						12,34,45566,5,65,6454,57,67,4557,45,76,756,456,43,432,634,
						34,646,546,57,567,6786,45,58,6,57,56,67,6547,657,56,75,754,
						45,5666,6,456,6,6,64,56,564,65,4654,6,5456,64,545,96,6,64,
						65,65,5,6,565,565465,564,65456,857,85,456,64,565465,4,545,
						-5,-145,5,-56,524,6545,6546,-456156,545,6654,65,5653,5,-5,
						-6546,-5456654,-5415,564,4,654,56465,655,-654,4654,5456,5
						};
	vector<int> array2 {12,2};
	
    struct timespec tpstart;
    struct timespec tpend;	
    
    clock_gettime(CLOCK_REALTIME, &tpstart);
    
    findMax2(array1,0,(array1.size()),max1_i,max2_i);
    
    clock_gettime(CLOCK_REALTIME, &tpend);
    
    double timedif = (tpend.tv_sec-tpstart.tv_sec)+(tpend.tv_nsec-tpstart.tv_nsec)/1000000000.0;
    printf("clock_gettime time: %.12f\n", timedif);
			
	cout <<"max1: "<<array1[max1_i]<<"; i= "<<max1_i <<endl;
	cout <<"max2: "<<array1[max2_i]<<"; i= "<<max2_i <<endl;
}


