#include <vector>
#include <iostream>
using namespace std;
void findMax2(vector<int> & array,int low,int high,int &max1,int &max2) 
{
	//int x1(0),x2(0);
	max2=array[0];
	max1=array[1];
	if(max2>max1){int temp(max2);max2=max1;max1=temp;}
	for (int i = low;i<=high;i++)
	{
		if (array[i]>max2) 
		{
			if (array[i]>max1)
			{
				//if()
				max2=max1;
				//x2= x1;
				max1=array[i];
				//x1= i;
				
			}
			else
			{
				max2=array[i];
				//x2= i;			
			}

		}
	}
}

int main()
{
	int max1(0),max2(0);
	vector<int> array1 {-2,-5,-3,-25,-546,-34,-6,-344,-45,-3,-34,-34,-344,-1,-9,
						1,3,453,35,46,656,7,567,76,67,65,4,3,4,6,3,7,5,8,57,5,6,
						345,7,68,987,9,4,34,578,7,43,57,678,45,8,566,8,65,89,45,
						345,67,68,87,879,7,98,9,89,8,98,96,7,5,4,5,3,4,3,45,54,45,
						12,34,45566,5,65,6454,57,67,4557,45,76,756,456,43,432,634,
						34,646,546,57,567,6786,45,58,6,57,56,67,6547,657,56,75,754,
						45,5666,6,456,6,6,64,56,564,65,4654,6,5456,64,545,96,6,64,
						65,65,5,6,565,565465,564,65456,857,85,456,64,565465,4,545,
						-5,-145,5,-56,524,6545,6546,-456156,545,6654,65,5653,5,-5,
						-6546,-5456654,-5415,564,4,654,56465,655,-654,4654,5456,5,
						3,56,5,6,6,6,654,5,4574,65,954158,5,5456,545,54,8524,585,552,
						54,5,5,6,5,56,6,5,65,5,5,5,6,5,56,5,6,56,5,65,65,5,655,565,
						4,5,5,5,6,6,6,8,5,8,5,8,5,8,5,8,589,59,6,966,9,58,5,89,6,96,9,
						588,58,98,585,5,8,85,885,8,8,8,8,8,8,8,55,66,65,6,99,9,99,
						1,3,453,35,46,656,7,567,76,67,65,4,3,4,6,3,7,5,8,57,5,6,
						345,7,68,987,9,4,34,578,7,43,57,678,45,8,566,8,65,89,45,
						345,67,68,87,879,7,98,9,89,8,98,96,7,5,4,5,3,4,3,45,54,45,
						12,34,45566,5,65,6454,57,67,4557,45,76,756,456,43,432,634,
						34,646,546,57,567,6786,45,58,6,57,56,67,6547,657,56,75,754,
						45,5666,6,456,6,6,64,56,564,65,4654,6,5456,64,545,96,6,64,
						65,65,5,6,565,565465,564,65456,857,85,456,64,565465,4,545,
						-5,-145,5,-56,524,6545,6546,-456156,545,6654,65,5653,5,-5,
						-6546,-5456654,-5415,564,4,654,56465,655,-654,4654,5456,5,
						1,3,453,35,46,656,7,567,76,67,65,4,3,4,6,3,7,5,8,57,5,6,
						345,7,68,987,9,4,34,578,7,43,57,678,45,8,566,8,65,89,45,
						345,67,68,87,879,7,98,9,89,8,98,96,7,5,4,5,3,4,3,45,54,45,
						12,34,45566,5,65,6454,57,67,4557,45,76,756,456,43,432,634,
						34,646,546,57,567,6786,45,58,6,57,56,67,6547,657,56,75,754,
						45,5666,6,456,6,6,64,56,564,65,4654,6,5456,64,545,96,6,64,
						65,65,5,6,565,565465,564,65456,857,85,456,64,565465,4,545,
						-5,-145,5,-56,524,6545,6546,-456156,545,6654,65,5653,5,-5,
						-6546,-5456654,-5415,564,4,654,56465,655,-654,4654,5456,5,
						1,3,453,35,46,656,7,567,76,67,65,4,3,4,6,3,7,5,8,57,5,6,
						345,7,68,987,9,4,34,578,7,43,57,678,45,8,566,8,65,89,45,
						345,67,68,87,879,7,98,9,89,8,98,96,7,5,4,5,3,4,3,45,54,45,
						12,34,45566,5,65,6454,57,67,4557,45,76,756,456,43,432,634,
						34,646,546,57,567,6786,45,58,6,57,56,67,6547,657,56,75,754,
						45,5666,6,456,6,6,64,56,564,65,4654,6,5456,64,545,96,6,64,
						65,65,5,6,565,565465,564,65456,857,85,456,64,565465,4,545,
						-5,-145,5,-56,524,6545,6546,-456156,545,6654,65,5653,5,-5,
						-6546,-5456654,-5415,564,4,654,56465,655,-654,4654,5456,5,
						1,3,453,35,46,656,7,567,76,67,65,4,3,4,6,3,7,5,8,57,5,6,
						345,7,68,987,9,4,34,578,7,43,57,678,45,8,566,8,65,89,45,
						345,67,68,87,879,7,98,9,89,8,98,96,7,5,4,5,3,4,3,45,54,45,
						12,34,45566,5,65,6454,57,67,4557,45,76,756,456,43,432,634,
						34,646,546,57,567,6786,45,58,6,57,56,67,6547,657,56,75,754,
						45,5666,6,456,6,6,64,56,564,65,4654,6,5456,64,545,96,6,64,
						65,65,5,6,565,565465,564,65456,857,85,456,64,565465,4,545,
						-5,-145,5,-56,524,6545,6546,-456156,545,6654,65,5653,5,-5,
						-6546,-5456654,-5415,564,4,654,56465,655,-654,4654,5456,5,
						1,3,453,35,46,656,7,567,76,67,65,4,3,4,6,3,7,5,8,57,5,6,
						345,7,68,987,9,4,34,578,7,43,57,678,45,8,566,8,65,89,45,
						345,67,68,87,879,7,98,9,89,8,98,96,7,5,4,5,3,4,3,45,54,45,
						12,34,45566,5,65,6454,57,67,4557,45,76,756,456,43,432,634,
						34,646,546,57,567,6786,45,58,6,57,56,67,6547,657,56,75,754,
						45,5666,6,456,6,6,64,56,564,65,4654,6,5456,64,545,96,6,64,
						65,65,5,6,565,565465,564,65456,857,85,456,64,565465,4,545,
						-5,-145,5,-56,524,6545,6546,-456156,545,6654,65,5653,5,-5,
						-6546,-5456654,-5415,564,4,654,56465,655,-654,4654,5456,5					
						};
	vector<int> array2 {12,2,34,43,5,534,345,533,5,5,3,34,3423,23,34};
	
	struct timespec tpstart;
    struct timespec tpend;	
    
    clock_gettime(CLOCK_REALTIME, &tpstart);
    
	findMax2(array1,0,(array1.size()-1),max1,max2);	
    
    clock_gettime(CLOCK_REALTIME, &tpend);
    
    double timedif = (tpend.tv_sec-tpstart.tv_sec)+(tpend.tv_nsec-tpstart.tv_nsec)/1000000000.0;
    printf("clock_gettime time: %.12f\n", timedif);

	
	cout <<"max1: "<<max1<<" " <<endl;
	cout <<"max2: "<<max2<<" " <<endl;
}
